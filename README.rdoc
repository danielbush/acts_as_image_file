== ActsAsImageFile

Allows you to treat an Active Record model as an image file.

Features:
* access both the image's location on the file system and its
  http or aliased location
* access resized versions of the image based on a specified width
  or height
* autogenerate sized images
* minimal database schema management; you only need to specify
  an image name field (excluding the path) in your model and the
  underlying file-based image db that comes with this plugin does
  the rest.  No extra fields or tables are needed.
* You can use image_db and image_file without using acts_as_image_file.
  These dependencies are located in lib/image_db/* and are a git
  submodule (a separate git project).  See the documentation for these
  on how to use them.
  acts_as_image_file is just a selective wrapper over image_db functionality
  for use with an active record model.
* Syncing between image db and the model is fairly basic.  We have one
  main callback - after_save which looks for changes in the name field
  of the model and updates the image db by renaming the images (both
  original and sized versions) to the new name.
  * [TODO] Currently destroying an image model does not delete its original or
    sized images in the underlying image db.  You could add a destroy
    callback to do this.
* validations
  * acts_as_image_file makes no validations.  You may want to add
    uniqueness and presence_of validations to the name field in your model.
    

Issues/requirements
* because of problems I've had with RMagick and compiled versions
  of ruby, I use the imagemagick binaries; this is probably slower
  that running via RMagick
  * you need bin/convert and bin/identify which are part of the
    imagemagick suite; these are searched for in /usr/bin and /usr/local/bin.
* the image_file library that is used by image_db can be easily
  modified/reimplemented to use RMagick


== Obtaining

* clone from github

    git pull git://github.com/danielbush/acts_as_image_file.git

* clone the github submodules
  
    cd /path/to/acts_as_image_file
    git submodule update --init

* This should clone and set up image_db within acts_as_image_file

* Run tests to make sure everything is working:

    cd /path/to/acts_as_image_file
    rake

== Important

Make sure you cd to the plugin directory and run 'rake' to run
the tests to make sure everything is working as expected.


== Synopsis

We take our Image model and make it act as an image file.
The location of the image files is specified as the first
argument to acts_as_image_file.  This location is exposed
via http.

We specify an optional alias (rel_root) to use in src attribute
of image tags.
We can also specify the name field in our AR model that tracks
the image name.

  class Image < ActiveRecord::Base
    acts_as_image_file '/rails_root/public/images/.../db' ,
      :rel_root => '/http/alias' ,
      :name_field => 'name' # Default
  end

  i = Image.new
  i.store '/path/to/image.jpg' # Stores image in image db and saves i.
  i.url
    => '/http/alias/originals/image.jpg'
  i.url :width => 60
    => '/http/alias/w/60/image.jpg'
    # Image will be autogenerated with width of 60 pixels
  i.path :width => 60
    => '/rails_root/public/images/.../db/w/60/image.jpg'
    # Image will be autogenerated with width of 60 pixels

  i.store '/path/to/image.jpg' , :name => 'image2.jpg'
  i.url
    => '/http/alias/originals/image2.jpg'

You can access the underlying image db using the 'db' method:

  i.db
or
  Image.db

Specify a not-found image.  This must be stored in the db either
manually or by invoking Image.db.store.

  Image.db.store '/path/to/not-found.jpg'  # Only once.

Put these settings in your model:

  Image.db.not_found_image = 'not-found.jpg'
  Image.db.use_not_found = true

Now you can do:

  i.path :width => 60 , :resize => false
    => '/.../not-found.jpg'
    # Image is not autogenerated.

Or 

  i.path :width => 60 ,
         :resize => false ,
         :not_found => 'alternative-not-found.jpg'
    => '/.../alternative-not-found.jpg' 

Or to turn not-found off for this particular call:

  i.path :width => 60 ,
         :not_found => nil
    => '/.../image.jpg'  # even if it doesn't exist

== ImageDB format

image db is a simple wrapper around a part of a file system
that is structured to store the same image at more than one size.

The format of the file system used by image db is intended to be
simple and modified by hand if necessary.

* The root of this system is usually set to a public (http accessible)
  area
  * eg /your-rails-root/public/images/path/to/db-root
* Originals are stored in db-root/originals/
* width-resized versions are stored in db-root/w/<width>/
* height-resized versions are stored in db-root/h/<width>/
* Sub-roots are allowed
  * db-root/groups/group-1 is a new root which you could
    access using Image.db['group-1'] 
    eg Image.db['group-1'].fetch('name.jpg',:width => 80) etc

== Documentation

Run: rake rerdoc (part of rails plugin rake tasks) to build
documentation.

== License

Copyright (c) 2010 Daniel Bush, released under the MIT license
